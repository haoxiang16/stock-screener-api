// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace StockAPI.Models;

public partial class StockContext : DbContext
{
    public StockContext(DbContextOptions<StockContext> options)
        : base(options)
    {
    }

    public virtual DbSet<CashFlowStatement> CashFlowStatements { get; set; }

    public virtual DbSet<Company> Companies { get; set; }

    public virtual DbSet<IncomeStatement> IncomeStatements { get; set; }

    public virtual DbSet<User> Users { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<CashFlowStatement>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__CashFlow__3213E83F20EBFE2A");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.BeginningCash)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("beginning_cash");
            entity.Property(e => e.CompanyCode)
                .HasMaxLength(10)
                .HasColumnName("company_code");
            entity.Property(e => e.CreatedAt)
                .HasColumnType("datetime")
                .HasColumnName("created_at");
            entity.Property(e => e.EndingCash)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("ending_cash");
            entity.Property(e => e.ExchangeRateEffect)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("exchange_rate_effect");
            entity.Property(e => e.FinancingCashFlow)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("financing_cash_flow");
            entity.Property(e => e.InvestingCashFlow)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("investing_cash_flow");
            entity.Property(e => e.NetChangeInCash)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("net_change_in_cash");
            entity.Property(e => e.OperatingCashFlow)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("operating_cash_flow");
            entity.Property(e => e.Season).HasColumnName("season");
            entity.Property(e => e.Year).HasColumnName("year");

            entity.HasOne(d => d.CompanyCodeNavigation).WithMany(p => p.CashFlowStatements)
                .HasForeignKey(d => d.CompanyCode)
                .HasConstraintName("FK__CashFlowS__compa__17036CC0");
        });

        modelBuilder.Entity<Company>(entity =>
        {
            entity.HasKey(e => e.CompanyCode).HasName("PK__Company__F4E508EB8F151C29");

            entity.ToTable("Company");

            entity.Property(e => e.CompanyCode)
                .HasMaxLength(10)
                .HasColumnName("company_code");
            entity.Property(e => e.CompanyName)
                .HasMaxLength(100)
                .HasColumnName("company_name");

            entity.HasIndex(e => e.CompanyCode)
                .HasName("IX_Company_CompanyCode");
        });

        modelBuilder.Entity<IncomeStatement>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__IncomeSt__3213E83F31E9F847");

            entity.HasIndex(e => new { e.CompanyCode, e.Year, e.Season })
                .HasName("IX_IncomeStatements_CompanyCode_Year_Season");

            entity.HasIndex(e => e.Season)
                .HasName("IX_IncomeStatements_Season");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CompanyCode)
                .HasMaxLength(10)
                .HasColumnName("company_code");
            entity.Property(e => e.ComprehensiveIncomeNonControlling)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("comprehensive_income_non_controlling");
            entity.Property(e => e.ComprehensiveIncomeParent)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("comprehensive_income_parent");
            entity.Property(e => e.ComprehensiveIncomePriorControl)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("comprehensive_income_prior_control");
            entity.Property(e => e.ContinuingOperationsIncome)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("continuing_operations_income");
            entity.Property(e => e.CreatedAt)
                .HasColumnType("datetime")
                .HasColumnName("created_at");
            entity.Property(e => e.DiscontinuedOperations)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("discontinued_operations");
            entity.Property(e => e.Eps)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("eps");
            entity.Property(e => e.GrossProfit)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("gross_profit");
            entity.Property(e => e.IncomeTax)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("income_tax");
            entity.Property(e => e.NetGrossProfit)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("net_gross_profit");
            entity.Property(e => e.NetIncome)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("net_income");
            entity.Property(e => e.NetIncomeNonControlling)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("net_income_non_controlling");
            entity.Property(e => e.NetIncomeParent)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("net_income_parent");
            entity.Property(e => e.NetIncomePriorControl)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("net_income_prior_control");
            entity.Property(e => e.NonControllingComprehensive)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("non_controlling_comprehensive");
            entity.Property(e => e.NonControllingPreMerger)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("non_controlling_pre_merger");
            entity.Property(e => e.NonOperating)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("non_operating");
            entity.Property(e => e.OperatingCosts)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("operating_costs");
            entity.Property(e => e.OperatingExpenses)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("operating_expenses");
            entity.Property(e => e.OperatingIncome)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("operating_income");
            entity.Property(e => e.OtherComprehensiveIncome)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("other_comprehensive_income");
            entity.Property(e => e.OtherIncomeExpenses)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("other_income_expenses");
            entity.Property(e => e.PreTaxIncome)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("pre_tax_income");
            entity.Property(e => e.RealizedProfit)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("realized_profit");
            entity.Property(e => e.Revenue)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("revenue");
            entity.Property(e => e.Season).HasColumnName("season");
            entity.Property(e => e.TotalComprehensiveIncome)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("total_comprehensive_income");
            entity.Property(e => e.UnrealizedProfit)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("unrealized_profit");
            entity.Property(e => e.Year).HasColumnName("year");

            entity.HasOne(d => d.CompanyCodeNavigation).WithMany(p => p.IncomeStatements)
                .HasForeignKey(d => d.CompanyCode)
                .HasConstraintName("FK__IncomeSta__compa__14270015");
        });

        modelBuilder.Entity<User>(entity =>
        {
            entity.HasIndex(e => e.Email, "UQ_Users_Email").IsUnique();

            entity.HasIndex(e => e.Username, "UQ_Users_Username").IsUnique();

            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("(getutcdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Email)
                .IsRequired()
                .HasMaxLength(100);
            entity.Property(e => e.Password)
                .IsRequired()
                .HasMaxLength(256);
            entity.Property(e => e.Username)
                .IsRequired()
                .HasMaxLength(50);
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);

    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
    {
        if (!optionsBuilder.IsConfigured)
        {
            // 設置命令超時
            optionsBuilder.UseSqlServer(
                "Server=(LocalDb)\\MSSQLLocalDB;Database=stock;Trusted_Connection=True;MultipleActiveResultSets=true;TrustServerCertificate=true",
                sqlServerOptionsAction: sqlOptions =>
                {
                    sqlOptions.CommandTimeout(300); // 設置更高的超時時間（5分鐘）
                    sqlOptions.EnableRetryOnFailure(
                        maxRetryCount: 3,  // 最多重試3次
                        maxRetryDelay: TimeSpan.FromSeconds(30), // 最長延遲30秒
                        errorNumbersToAdd: null); // 使用默認的錯誤碼
                });
        }
    }
}